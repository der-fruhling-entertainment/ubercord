plugins {
    id 'dev.nokee.jni-library'
    id 'dev.nokee.cpp-language'
    id 'java'
    id 'maven-publish'
    id 'org.jreleaser' version '1.18.0'
}

group = "net.derfruhling.discord"
version = "1.0-SNAPSHOT"

library {
    targetMachines = [machines.windows.x86_64, machines.macOS, machines.linux.x86_64]

    dependencies {
        String os = System.getProperty("os.name").toLowerCase();
        if(os.contains("windows")) {
            nativeImplementation(files("discord_social_sdk/lib/release/discord_partner_sdk.lib"))
        } else if (os.contains("linux")) {
            nativeImplementation(files("discord_social_sdk/lib/release/libdiscord_partner_sdk.so"))
        } else if (os.contains("mac")) {
            nativeImplementation(files("discord_social_sdk/lib/release/libdiscord_partner_sdk.dylib"))
        } else {
            throw new RuntimeException("Unsupported OS: " + os);
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

configurations {
    artifact
}

dependencies {
    implementation platform('org.apache.logging.log4j:log4j-bom:2.24.3')
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'
    compileOnly 'org.jetbrains:annotations:26.0.2'
}

def socialsdk4jJniMacosArtifact = artifacts.add('artifact', layout.buildDirectory.file("libs/main/macos/libsocialsdk4j.dylib")) {
    builtBy("sharedLibraryMacos")
}

def socialsdk4jJniLinuxArtifact = artifacts.add('artifact', layout.buildDirectory.file("libs/main/linux/libsocialsdk4j.so")) {
    builtBy("sharedLibraryLinux")
}

def socialsdk4jJniWindowsArtifact = artifacts.add('artifact', layout.buildDirectory.file("libs/main/windows/socialsdk4j.dll")) {
    builtBy("sharedLibraryWindows")
}

def jarLinuxBinaries = tasks.register("jarLinuxBinaries", Jar) {
    archiveClassifier = "linux"

    from(rootProject.projectDir.toPath().resolve("LICENSE.txt"))

    from("discord_social_sdk/License-Notices.txt") {
        rename("License-Notices.txt", "LICENSE-DiscordSocialSdk.txt")
    }

    from("discord_social_sdk/lib/release/libdiscord_partner_sdk.so")
    from(socialsdk4jJniLinuxArtifact.file)

    if(System.getProperty("ci") != "yes")
        dependsOn(socialsdk4jJniLinuxArtifact)
}

def jarMacosBinaries = tasks.register("jarMacosBinaries", Jar) {
    archiveClassifier = "macos"

    from(rootProject.projectDir.toPath().resolve("LICENSE.txt"))

    from("discord_social_sdk/License-Notices.txt") {
        rename("License-Notices.txt", "LICENSE-DiscordSocialSdk.txt")
    }

    from("discord_social_sdk/lib/release/libdiscord_partner_sdk.dylib")
    from(socialsdk4jJniMacosArtifact.file)

    if(System.getProperty("ci") != "yes")
        dependsOn(socialsdk4jJniMacosArtifact)
}

def jarWindowsBinaries = tasks.register("jarWindowsBinaries", Jar) {
    archiveClassifier = "macos"

    from(rootProject.projectDir.toPath().resolve("LICENSE.txt"))

    from("discord_social_sdk/License-Notices.txt") {
        rename("License-Notices.txt", "LICENSE-DiscordSocialSdk.txt")
    }

    from("discord_social_sdk/bin/release/libdiscord_partner_sdk.dll")
    from(socialsdk4jJniWindowsArtifact.file)

    if(System.getProperty("ci") != "yes")
        dependsOn(socialsdk4jJniWindowsArtifact)
}

def discordPartnerSdkWindowsArtifact = artifacts.add('artifact', jarWindowsBinaries)
def discordPartnerSdkLinuxArtifact = artifacts.add('artifact', jarLinuxBinaries)
def discordPartnerSdkMacosArtifact = artifacts.add('artifact', jarMacosBinaries)

publishing {
    publications {
        create("maven", MavenPublication) {
            groupId = 'net.derfruhling.discord.socialsdk4j'
            artifactId = 'socialsdk4j'

            artifact(jar)

            artifact(discordPartnerSdkLinuxArtifact) {
                classifier = "linux"
            }

            artifact(discordPartnerSdkMacosArtifact) {
                classifier = "macos"
            }

            artifact(discordPartnerSdkWindowsArtifact) {
                classifier = "windows"
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

tasks.test {
    useJUnitPlatform()
}
