plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    modImplementation "dev.lambdaurora:spruceui:$rootProject.spruceui_version"
    include(modImplementation "dev.lambdaurora:spruceui:$rootProject.spruceui_version")

    modApi("me.shedaniel.cloth:cloth-config-fabric:15.0.140") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation project(path: ":socialsdk4j", configuration: 'default')
    implementation 'com.auth0:java-jwt:4.5.0'
    implementation 'com.auth0:jwks-rsa:0.22.1'

    common(project(path: ':mod:common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':mod:common', configuration: 'transformProductionFabric')
    shadowBundle project(path: ":socialsdk4j", configuration: 'default')
    shadowBundle 'com.auth0:java-jwt:4.5.0'
    shadowBundle 'com.auth0:jwks-rsa:0.22.1'
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
